"C:\Program Files\Java\jdk1.8.0_202\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\lib\idea_rt.jar=53493:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_202\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\rt.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\out\production\daikon_modified;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\javac.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\checker.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\reflection-util-1.0.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\options-1.0.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\require-javadoc-1.0.2-all.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\java-getopt-1.0.14.0.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-6.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\plume-util-1.5.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\commons-exec-1.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\hamcrest-core-1.3-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-qual.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-util-1.1.13.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\junit-4.13.2-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\daikon-plumelib.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\jFormatString-3.0.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\javacutil-3.1.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\diffutils-1.3.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\threeten-extra-1.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\caffeine-2.8.4.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\error_prone_core-2.7.1-with-dependencies.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\dataflow-shaded-3.11.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\dcomp_premain.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\ChicoryPremain.jar;C:\Program Files\Java\jdk1.8.0_202\lib\tools.jar" daikon.Daikon
Daikon version 5.8.10, released November 1, 2021; http://plse.cs.washington.edu/daikon.
(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
size(input.price[]) >= 1
size(input.attributes[]) one of { 1, 2, 3 }
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.limit < input.open_at
input.limit > size(input.categories[])
input.limit > size(input.price[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > size(input.price[])
input.open_at > size(input.attributes[])
size(input.categories[]) >= size(input.attributes[])
size(input.price[]) >= size(input.attributes[])
===========================================================================
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
size(input.price[]) >= 1
size(input.attributes[]) one of { 1, 2, 3 }
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.limit < input.open_at
input.limit > size(input.categories[])
input.limit > size(input.price[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > size(input.price[])
input.open_at > size(input.attributes[])
size(input.categories[]) >= size(input.attributes[])
size(input.price[]) >= size(input.attributes[])
===========================================================================
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
size(input.price[]) >= 1
size(input.attributes[]) one of { 1, 2, 3 }
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.limit < input.open_at
input.limit > size(input.categories[])
input.limit > size(input.price[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > size(input.price[])
input.open_at > size(input.attributes[])
size(input.categories[]) >= size(input.attributes[])
size(input.price[]) >= size(input.attributes[])
===========================================================================
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
LENGTH(return.id)==22
return.is_closed == false
return.phone is Numeric
return.review_count >= 1
return.url is Url
return.transactions[] elements one of { "delivery", "pickup", "restaurant_reservation" }
LENGTH(return.location.country)==2
size(input.price[]) >= 1
size(input.attributes[]) one of { 1, 2, 3 }
size(return.categories[]) >= 1
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.radius > size(return.categories[])
input.radius > size(return.transactions[])
input.radius > size(return.location.display_address[])
input.limit < input.open_at
input.limit > size(input.categories[])
input.limit > size(input.price[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > return.review_count
input.open_at > size(input.price[])
input.open_at > size(input.attributes[])
input.open_at > size(return.categories[])
input.open_at > size(return.transactions[])
input.open_at > size(return.location.display_address[])
return.distance > return.rating
return.review_count >= size(input.attributes[])
return.review_count > size(return.transactions[])
size(input.categories[]) >= size(input.attributes[])
size(input.categories[]) >= size(return.transactions[])
size(input.price[]) >= size(input.attributes[])
===========================================================================
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
size(input.attributes[]) one of { 1, 2, 3 }
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.limit < input.open_at
input.limit > size(input.price[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > size(input.price[])
===========================================================================
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT
input.latitude is Numeric
input.longitude is Numeric
input.offset >= 1
All the elements of input.price[] are Numeric
All the elements of input.price[] have LENGTH=1
return.total >= 0
size(input.attributes[]) one of { 1, 2, 3 }
input.radius > input.limit
input.radius > input.offset
input.radius < input.open_at
input.radius > size(input.categories[])
input.radius > size(input.price[])
input.radius > size(input.attributes[])
input.radius > size(return.businesses[])
input.limit < input.open_at
input.limit > size(input.price[])
input.limit >= size(return.businesses[])
input.offset < input.open_at
input.offset >= size(input.attributes[])
input.open_at > return.total
input.open_at > size(input.price[])
input.open_at > size(return.businesses[])
return.total >= size(return.businesses[])
Exiting Daikon.

Process finished with exit code 0
