main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.type == "artist";daikon.inv.unary.string.OneOfString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type == return.type;daikon.inv.binary.twoString.StringEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists[] elements != null;daikon.inv.unary.sequence.EltNonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.is_local == false;daikon.inv.unary.scalar.OneOfScalar
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type == "track";daikon.inv.unary.string.OneOfString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.restrictions.reason one of { "explicit", "market" };daikon.inv.unary.string.OneOfString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type == "track";daikon.inv.unary.string.OneOfString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.available_markets[])-1 != 0;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit >= return.disc_number;daikon.inv.binary.twoScalar.IntGreaterEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.market in return.available_markets[];daikon.inv.binary.sequenceString.MemberString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.href in return.available_markets[];daikon.inv.binary.sequenceString.MemberString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id in return.available_markets[];daikon.inv.binary.sequenceString.MemberString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type in return.available_markets[];daikon.inv.binary.sequenceString.MemberString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.uri in return.available_markets[];daikon.inv.binary.sequenceString.MemberString
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > return.track_number;daikon.inv.binary.twoScalar.IntGreaterThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.available_markets[]);daikon.inv.binary.twoScalar.IntGreaterThan
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[])-1 != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items != null;daikon.inv.unary.scalar.NonZero
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items[] elements != null;daikon.inv.unary.sequence.EltNonZero
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= 1;daikon.inv.unary.scalar.LowerBound
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual