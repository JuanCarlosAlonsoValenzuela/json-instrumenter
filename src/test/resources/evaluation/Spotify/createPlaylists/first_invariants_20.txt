(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
main.users{user_id}playlists.createPlaylist_201(main.createPlaylist_Input):::ENTER
===========================================================================
main.users{user_id}playlists.createPlaylist_201(main.createPlaylist_Input):::EXIT
input == orig(input)
input.user_id == return.owner.id
input.user_id == orig(input.user_id)
input.name == return.name
input.name == orig(input.name)
input.description == return.description
input.description == orig(input.description)
input.public == return.public
input.public == orig(input.public)
input.collaborative == return.collaborative
input.collaborative == orig(input.collaborative)
return.followers.total == return.owner.followers.total
return.followers.total == return.tracks.offset
return.followers.total == return.tracks.total
return.followers.total == size(return.images[])
return.followers.total == size(return.tracks.items[])
LENGTH(return.external_urls.spotify)==56
return.external_urls.spotify is Url
LENGTH(return.href)==59
return.href is Url
LENGTH(return.id)==22
return.images[] == []
return.owner.external_urls.spotify is Url
return.owner.href is Url
return.owner.type == "user"
LENGTH(return.owner.type)==4
LENGTH(return.snapshot_id)==56
LENGTH(return.tracks.href)==66
return.tracks.href is Url
return.tracks.items[] == []
return.tracks.limit == 100
return.type == "playlist"
LENGTH(return.type)==8
LENGTH(return.uri)==39
Exiting Daikon.