"C:\Program Files\Java\jdk1.8.0_202\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\lib\idea_rt.jar=52074:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_202\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\rt.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\out\production\daikon_modified;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\javac.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\checker.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\reflection-util-1.0.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\options-1.0.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\require-javadoc-1.0.2-all.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\java-getopt-1.0.14.0.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-6.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\plume-util-1.5.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\commons-exec-1.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\hamcrest-core-1.3-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-qual.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-util-1.1.13.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\junit-4.13.2-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\daikon-plumelib.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\jFormatString-3.0.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\javacutil-3.1.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\diffutils-1.3.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\threeten-extra-1.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\caffeine-2.8.4.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\error_prone_core-2.7.1-with-dependencies.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\dataflow-shaded-3.11.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\dcomp_premain.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\ChicoryPremain.jar;C:\Program Files\Java\jdk1.8.0_202\lib\tools.jar" daikon.Daikon
Daikon version 5.8.10, released November 1, 2021; http://plse.cs.washington.edu/daikon.
(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
main.businessessearch.getBusinesses_200(main.getBusinesses_Input):::ENTER
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
===========================================================================
main.businessessearch.getBusinesses_200(main.getBusinesses_Input):::EXIT
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.NonZero
return != null
daikon.inv.unary.scalar.LowerBound
return.total >= 0
daikon.inv.unary.scalar.NonZero
return.region != null
daikon.inv.unary.scalar.NonZero
return.region.center != null
daikon.inv.unary.scalar.NonZero
return.businesses != null
daikon.inv.unary.sequence.EltNonZero
return.businesses[] elements != null
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(return.businesses[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntGreaterEqual
input.limit >= size(return.businesses[])
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > return.total
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(return.businesses[])
daikon.inv.binary.twoScalar.IntGreaterEqual
return.total >= size(return.businesses[])
===========================================================================
main.businessessearch.getBusinesses_200_businesses(main.getBusinesses_Input):::ENTER
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
daikon.inv.ternary.threeScalar.LinearTernary
31852 * input.limit - 25 * input.open_at + 792150 * size(input.categories[]) + 4.1288698585E10 == 0
daikon.inv.ternary.threeScalar.LinearTernary
input.open_at + 123674 * size(input.price[]) - 325913 * size(input.attributes[]) - 1651535585 == 0
===========================================================================
main.businessessearch.getBusinesses_200_businesses(main.getBusinesses_Input):::EXIT
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.NonZero
return != null
daikon.inv.unary.scalar.NonZero
return.categories != null
daikon.inv.unary.sequence.EltNonZero
return.categories[] elements != null
daikon.inv.unary.scalar.NonZero
return.coordinates != null
daikon.inv.unary.string.FixedLengthString
LENGTH(return.id)==22
daikon.inv.unary.scalar.LowerBound
return.review_count >= 1
daikon.inv.unary.string.IsUrl
return.url is Url
daikon.inv.unary.scalar.NonZero
return.transactions != null
daikon.inv.unary.stringsequence.EltOneOfString
return.transactions[] elements one of { "delivery", "pickup", "restaurant_reservation" }
daikon.inv.unary.scalar.NonZero
return.location != null
daikon.inv.unary.string.FixedLengthString
LENGTH(return.location.country)==2
daikon.inv.unary.scalar.NonZero
return.location.display_address != null
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.unary.scalar.LowerBound
size(return.location.display_address[]) >= 1
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(return.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(return.transactions[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(return.location.display_address[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > return.review_count
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(return.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(return.transactions[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(return.location.display_address[])
daikon.inv.ternary.threeScalar.LinearTernary
31852 * input.limit - 25 * input.open_at + 792150 * size(input.categories[]) + 4.1288698585E10 == 0
daikon.inv.ternary.threeScalar.LinearTernary
input.open_at + 123674 * size(input.price[]) - 325913 * size(input.attributes[]) - 1651535585 == 0
===========================================================================
main.businessessearch.getBusinesses_200_businesses_categories(main.getBusinesses_Input):::ENTER
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
daikon.inv.ternary.threeScalar.LinearTernary
31852 * input.limit - 25 * input.open_at + 792150 * size(input.categories[]) + 4.1288698585E10 == 0
daikon.inv.ternary.threeScalar.LinearTernary
input.open_at + 123674 * size(input.price[]) - 325913 * size(input.attributes[]) - 1651535585 == 0
===========================================================================
main.businessessearch.getBusinesses_200_businesses_categories(main.getBusinesses_Input):::EXIT
daikon.inv.unary.scalar.NonZero
input != null
daikon.inv.unary.string.IsNumeric
input.latitude is Numeric
daikon.inv.unary.string.IsNumeric
input.longitude is Numeric
daikon.inv.unary.scalar.LowerBound
input.offset >= 1
daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric
All the elements of input.price[] are Numeric
daikon.inv.unary.stringsequence.SequenceFixedLengthString
All the elements of input.price[] have LENGTH=1
daikon.inv.unary.scalar.NonZero
return != null
daikon.inv.unary.scalar.LowerBound
size(input.categories[]) >= 1
daikon.inv.unary.scalar.LowerBound
size(input.price[]) >= 1
daikon.inv.unary.scalar.OneOfScalar
size(input.attributes[]) one of { 1, 2, 3 }
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.limit
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > input.offset
daikon.inv.binary.twoScalar.IntLessThan
input.radius < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.radius > size(input.attributes[])
daikon.inv.binary.twoScalar.IntLessThan
input.limit < input.open_at
daikon.inv.binary.twoScalar.IntLessThan
input.offset < input.open_at
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.categories[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.price[])
daikon.inv.binary.twoScalar.IntGreaterThan
input.open_at > size(input.attributes[])
daikon.inv.ternary.threeScalar.LinearTernary
31852 * input.limit - 25 * input.open_at + 792150 * size(input.categories[]) + 4.1288698585E10 == 0
daikon.inv.ternary.threeScalar.LinearTernary
input.open_at + 123674 * size(input.price[]) - 325913 * size(input.attributes[]) - 1651535585 == 0
Exiting Daikon.

Process finished with exit code 0
