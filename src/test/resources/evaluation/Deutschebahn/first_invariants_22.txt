"C:\Program Files\Java\jdk1.8.0_202\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\lib\idea_rt.jar=54324:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.3.2\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_202\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_202\jre\lib\rt.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\out\production\daikon_modified;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\javac.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-framework\checker.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\reflection-util-1.0.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\options-1.0.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\require-javadoc-1.0.2-all.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\java-getopt-1.0.14.0.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-6.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\plume-util-1.5.5.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\commons-exec-1.3.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\hamcrest-core-1.3-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\checker-qual.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\bcel-util-1.1.13.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\junit-4.13.2-Daikon.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\daikon-plumelib.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\jFormatString-3.0.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\javacutil-3.1.1.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\diffutils-1.3.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\threeten-extra-1.5.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\caffeine-2.8.4.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\error_prone_core-2.7.1-with-dependencies.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\lib\error-prone\dataflow-shaded-3.11.0.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\dcomp_premain.jar;C:\Users\jcav\Documents\GitHub\daikon_modified\java\ChicoryPremain.jar;C:\Program Files\Java\jdk1.8.0_202\lib\tools.jar" daikon.Daikon
Daikon version 5.8.10, released November 1, 2021; http://plse.cs.washington.edu/daikon.
(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
main.stations.getStations_200(main.getStations_Input):::ENTER
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
===========================================================================
main.stations.getStations_200(main.getStations_Input):::EXIT
input == orig(input)
input.offset == return.offset
input.offset == orig(input.offset)
input.limit == orig(input.limit)
input.searchstring == orig(input.searchstring)
input.category == orig(input.category)
input.federalstate == orig(input.federalstate)
input.eva == orig(input.eva)
input.ril == orig(input.ril)
input.logicaloperator == orig(input.logicaloperator)
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
return.total >= 1
size(return.result[]) >= 1
input.offset < return.limit
input.offset < return.total
input.offset <= size(return.result[])-1
input.limit % return.limit == 0
input.limit <= return.limit
input.limit % size(return.result[]) == 0
return.limit >= size(return.result[])
return.total >= size(return.result[])
===========================================================================
main.stations.getStations_200_result(main.getStations_Input):::ENTER
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
===========================================================================
main.stations.getStations_200_result(main.getStations_Input):::EXIT
input == orig(input)
input.offset == orig(input.offset)
input.limit == orig(input.limit)
input.searchstring == orig(input.searchstring)
input.category == orig(input.category)
input.federalstate == orig(input.federalstate)
input.eva == orig(input.eva)
input.ril == orig(input.ril)
input.logicaloperator == orig(input.logicaloperator)
return.localServiceStaff.availability.monday.fromTime == return.localServiceStaff.availability.tuesday.fromTime
return.localServiceStaff.availability.monday.fromTime == return.localServiceStaff.availability.wednesday.fromTime
return.localServiceStaff.availability.monday.fromTime == return.localServiceStaff.availability.thursday.fromTime
return.localServiceStaff.availability.monday.fromTime == return.localServiceStaff.availability.friday.fromTime
return.localServiceStaff.availability.monday.toTime == return.localServiceStaff.availability.tuesday.toTime
return.localServiceStaff.availability.monday.toTime == return.localServiceStaff.availability.wednesday.toTime
return.localServiceStaff.availability.monday.toTime == return.localServiceStaff.availability.thursday.toTime
return.localServiceStaff.availability.monday.toTime == return.localServiceStaff.availability.friday.toTime
return.DBinformation.availability.monday.fromTime == return.DBinformation.availability.tuesday.fromTime
return.DBinformation.availability.monday.fromTime == return.DBinformation.availability.wednesday.fromTime
return.DBinformation.availability.monday.fromTime == return.DBinformation.availability.thursday.fromTime
return.DBinformation.availability.monday.fromTime == return.DBinformation.availability.friday.fromTime
return.DBinformation.availability.monday.toTime == return.DBinformation.availability.tuesday.toTime
return.DBinformation.availability.monday.toTime == return.DBinformation.availability.wednesday.toTime
return.DBinformation.availability.monday.toTime == return.DBinformation.availability.thursday.toTime
return.DBinformation.availability.monday.toTime == return.DBinformation.availability.friday.toTime
return.DBinformation.availability.sunday.toTime == return.DBinformation.availability.holiday.toTime
return.regionalbereich.name == return.regionalbereich.shortName
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
return.hasSteplessAccess one of { "no", "partial", "yes" }
return.hasMobilityService one of { "Ja, um Voranmeldung unter 030 65 21 28 88 (Ortstarif) wird gebeten", "Nur nach Voranmeldung unter 030 65 21 28 88 (Ortstarif)", "no" }
return.stationManagement.number >= 1
LENGTH(return.localServiceStaff.availability.monday.fromTime)==5
LENGTH(return.localServiceStaff.availability.monday.toTime)==5
LENGTH(return.localServiceStaff.availability.saturday.fromTime)==5
LENGTH(return.localServiceStaff.availability.saturday.toTime)==5
LENGTH(return.localServiceStaff.availability.sunday.fromTime)==5
LENGTH(return.localServiceStaff.availability.sunday.toTime)==5
LENGTH(return.localServiceStaff.availability.holiday.fromTime)==5
LENGTH(return.localServiceStaff.availability.holiday.toTime)==5
LENGTH(return.DBinformation.availability.monday.fromTime)==5
LENGTH(return.DBinformation.availability.monday.toTime)==5
LENGTH(return.DBinformation.availability.saturday.fromTime)==5
LENGTH(return.DBinformation.availability.saturday.toTime)==5
LENGTH(return.DBinformation.availability.sunday.fromTime)==5
LENGTH(return.DBinformation.availability.sunday.toTime)==5
LENGTH(return.DBinformation.availability.holiday.fromTime)==5
return.regionalbereich.number >= 1
size(return.evaNumbers[]) >= 1
size(return.ril100Identifiers[]) >= 1
input.offset < return.number
return.number >= size(return.evaNumbers[])
return.number >= size(return.ril100Identifiers[])
return.stationManagement.number >= size(return.evaNumbers[])-1
return.szentrale.number >= size(return.evaNumbers[])-1
===========================================================================
main.stations.getStations_200_result_evaNumbers(main.getStations_Input):::ENTER
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
===========================================================================
main.stations.getStations_200_result_evaNumbers(main.getStations_Input):::EXIT
input == orig(input)
input.offset == orig(input.offset)
input.limit == orig(input.limit)
input.searchstring == orig(input.searchstring)
input.category == orig(input.category)
input.federalstate == orig(input.federalstate)
input.eva == orig(input.eva)
input.ril == orig(input.ril)
input.logicaloperator == orig(input.logicaloperator)
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
return.geographicCoordinates.type == "Point"
LENGTH(return.geographicCoordinates.type)==5
return.geographicCoordinates.coordinates[] sorted by <
size(return.geographicCoordinates.coordinates[]) == 2
input.offset < return.number
input.limit < return.number
return.number > size(return.geographicCoordinates.coordinates[])
===========================================================================
main.stations.getStations_200_result_ril100Identifiers(main.getStations_Input):::ENTER
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
===========================================================================
main.stations.getStations_200_result_ril100Identifiers(main.getStations_Input):::EXIT
input == orig(input)
input.offset == orig(input.offset)
input.limit == orig(input.limit)
input.searchstring == orig(input.searchstring)
input.category == orig(input.category)
input.federalstate == orig(input.federalstate)
input.eva == orig(input.eva)
input.ril == orig(input.ril)
input.logicaloperator == orig(input.logicaloperator)
input.offset >= 0
input.limit >= 0
input.eva >= 0
input.logicaloperator one of { "and", "or" }
return.geographicCoordinates.type == "Point"
LENGTH(return.geographicCoordinates.type)==5
return.geographicCoordinates.coordinates[] sorted by <
size(return.geographicCoordinates.coordinates[]) == 2
Exiting Daikon.

Process finished with exit code 0
